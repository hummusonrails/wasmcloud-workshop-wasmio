// Code generated by wit-bindgen-go. DO NOT EDIT.

package document

import (
	"github.com/bytecodealliance/wasm-tools-go/cm"
	"github.com/vados-cosmonic/wasmcon2024-couchbase-workshop/nubase/gen/wasmcloud/couchbase/types"
	"unsafe"
)

// MutationMetadataShape is used for storage in variant or result types.
type MutationMetadataShape struct {
	_     cm.HostLayout
	shape [unsafe.Sizeof(types.MutationMetadata{})]byte
}

// DocumentGetResultShape is used for storage in variant or result types.
type DocumentGetResultShape struct {
	_     cm.HostLayout
	shape [unsafe.Sizeof(DocumentGetResult{})]byte
}

// DocumentGetReplicaResultShape is used for storage in variant or result types.
type DocumentGetReplicaResultShape struct {
	_     cm.HostLayout
	shape [unsafe.Sizeof(DocumentGetReplicaResult{})]byte
}

func lower_OptionU64(v cm.Option[uint64]) (f0 uint32, f1 uint64) {
	some := v.Some()
	if some != nil {
		f0 = 1
		v1 := (uint64)(*some)
		f1 = (uint64)(v1)
	}
	return
}

func lower_TupleU64U64(v [2]uint64) (f0 uint64, f1 uint64) {
	f0 = (uint64)(v[0])
	f1 = (uint64)(v[1])
	return
}

func lower_RetryStrategy(v types.RetryStrategy) (f0 uint32, f1 uint64, f2 uint64) {
	f0 = (uint32)(v.Tag())
	switch f0 {
	case 0: // interval-times-ms
		v1, v2 := lower_TupleU64U64(*v.IntervalTimesMs())
		f1 = (uint64)(v1)
		f2 = (uint64)(v2)
	}
	return
}

func lower_OptionRetryStrategy(v cm.Option[RetryStrategy]) (f0 uint32, f1 uint32, f2 uint64, f3 uint64) {
	some := v.Some()
	if some != nil {
		f0 = 1
		v1, v2, v3 := lower_RetryStrategy(*some)
		f1 = (uint32)(v1)
		f2 = (uint64)(v2)
		f3 = (uint64)(v3)
	}
	return
}

func lower_OptionRequestSpan(v cm.Option[RequestSpan]) (f0 uint32, f1 *uint8, f2 uint32) {
	some := v.Some()
	if some != nil {
		f0 = 1
		v1, v2 := cm.LowerString(*some)
		f1 = (*uint8)(v1)
		f2 = (uint32)(v2)
	}
	return
}

func lower_DocumentGetAnyReplicaOptions(v DocumentGetAnyReplicaOptions) (f0 uint32, f1 uint64, f2 uint32, f3 uint32, f4 uint64, f5 uint64, f6 uint32, f7 *uint8, f8 uint32) {
	f0, f1 = lower_OptionU64(v.TimeoutNs)
	f2, f3, f4, f5 = lower_OptionRetryStrategy(v.RetryStrategy)
	f6, f7, f8 = lower_OptionRequestSpan(v.ParentSpan)
	return
}

func lower_OptionDocumentGetAnyReplicaOptions(v cm.Option[DocumentGetAnyReplicaOptions]) (f0 uint32, f1 uint32, f2 uint64, f3 uint32, f4 uint32, f5 uint64, f6 uint64, f7 uint32, f8 *uint8, f9 uint32) {
	some := v.Some()
	if some != nil {
		f0 = 1
		v1, v2, v3, v4, v5, v6, v7, v8, v9 := lower_DocumentGetAnyReplicaOptions(*some)
		f1 = (uint32)(v1)
		f2 = (uint64)(v2)
		f3 = (uint32)(v3)
		f4 = (uint32)(v4)
		f5 = (uint64)(v5)
		f6 = (uint64)(v6)
		f7 = (uint32)(v7)
		f8 = (*uint8)(v8)
		f9 = (uint32)(v9)
	}
	return
}

func lower_DocumentGetAllReplicaOptions(v DocumentGetAllReplicaOptions) (f0 uint32, f1 uint64, f2 uint32, f3 uint32, f4 uint64, f5 uint64, f6 uint32, f7 *uint8, f8 uint32) {
	f0, f1 = lower_OptionU64(v.TimeoutNs)
	f2, f3, f4, f5 = lower_OptionRetryStrategy(v.RetryStrategy)
	f6, f7, f8 = lower_OptionRequestSpan(v.ParentSpan)
	return
}

func lower_OptionDocumentGetAllReplicaOptions(v cm.Option[DocumentGetAllReplicaOptions]) (f0 uint32, f1 uint32, f2 uint64, f3 uint32, f4 uint32, f5 uint64, f6 uint64, f7 uint32, f8 *uint8, f9 uint32) {
	some := v.Some()
	if some != nil {
		f0 = 1
		v1, v2, v3, v4, v5, v6, v7, v8, v9 := lower_DocumentGetAllReplicaOptions(*some)
		f1 = (uint32)(v1)
		f2 = (uint64)(v2)
		f3 = (uint32)(v3)
		f4 = (uint32)(v4)
		f5 = (uint64)(v5)
		f6 = (uint64)(v6)
		f7 = (uint32)(v7)
		f8 = (*uint8)(v8)
		f9 = (uint32)(v9)
	}
	return
}

func lower_DocumentRemoveOptions(v DocumentRemoveOptions) (f0 uint64, f1 uint64, f2 uint64, f3 uint32, f4 uint32, f5 uint64, f6 uint32, f7 uint32, f8 uint64, f9 uint64, f10 uint32, f11 *uint8, f12 uint32) {
	f0 = (uint64)(v.Cas)
	f1 = (uint64)(v.PersistTo)
	f2 = (uint64)(v.ReplicateTo)
	f3 = (uint32)(v.DurabilityLevel)
	f4, f5 = lower_OptionU64(v.TimeoutNs)
	f6, f7, f8, f9 = lower_OptionRetryStrategy(v.RetryStrategy)
	f10, f11, f12 = lower_OptionRequestSpan(v.ParentSpan)
	return
}

func lower_OptionDocumentRemoveOptions(v cm.Option[DocumentRemoveOptions]) (f0 uint32, f1 uint64, f2 uint64, f3 uint64, f4 uint32, f5 uint32, f6 uint64, f7 uint32, f8 uint32, f9 uint64, f10 uint64, f11 uint32, f12 *uint8, f13 uint32) {
	some := v.Some()
	if some != nil {
		f0 = 1
		v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13 := lower_DocumentRemoveOptions(*some)
		f1 = (uint64)(v1)
		f2 = (uint64)(v2)
		f3 = (uint64)(v3)
		f4 = (uint32)(v4)
		f5 = (uint32)(v5)
		f6 = (uint64)(v6)
		f7 = (uint32)(v7)
		f8 = (uint32)(v8)
		f9 = (uint64)(v9)
		f10 = (uint64)(v10)
		f11 = (uint32)(v11)
		f12 = (*uint8)(v12)
		f13 = (uint32)(v13)
	}
	return
}

func lower_DocumentGetAndLockOptions(v DocumentGetAndLockOptions) (f0 uint64, f1 uint32, f2 uint64, f3 uint32, f4 uint32, f5 uint64, f6 uint64, f7 uint32, f8 *uint8, f9 uint32) {
	f0 = (uint64)(v.LockTime)
	f1, f2 = lower_OptionU64(v.TimeoutNs)
	f3, f4, f5, f6 = lower_OptionRetryStrategy(v.RetryStrategy)
	f7, f8, f9 = lower_OptionRequestSpan(v.ParentSpan)
	return
}

func lower_OptionDocumentGetAndLockOptions(v cm.Option[DocumentGetAndLockOptions]) (f0 uint32, f1 uint64, f2 uint32, f3 uint64, f4 uint32, f5 uint32, f6 uint64, f7 uint64, f8 uint32, f9 *uint8, f10 uint32) {
	some := v.Some()
	if some != nil {
		f0 = 1
		v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 := lower_DocumentGetAndLockOptions(*some)
		f1 = (uint64)(v1)
		f2 = (uint32)(v2)
		f3 = (uint64)(v3)
		f4 = (uint32)(v4)
		f5 = (uint32)(v5)
		f6 = (uint64)(v6)
		f7 = (uint64)(v7)
		f8 = (uint32)(v8)
		f9 = (*uint8)(v9)
		f10 = (uint32)(v10)
	}
	return
}

func lower_DocumentUnlockOptions(v DocumentUnlockOptions) (f0 uint64, f1 uint32, f2 uint64, f3 uint32, f4 uint32, f5 uint64, f6 uint64, f7 uint32, f8 *uint8, f9 uint32) {
	f0 = (uint64)(v.Cas)
	f1, f2 = lower_OptionU64(v.TimeoutNs)
	f3, f4, f5, f6 = lower_OptionRetryStrategy(v.RetryStrategy)
	f7, f8, f9 = lower_OptionRequestSpan(v.ParentSpan)
	return
}

func lower_OptionDocumentUnlockOptions(v cm.Option[DocumentUnlockOptions]) (f0 uint32, f1 uint64, f2 uint32, f3 uint64, f4 uint32, f5 uint32, f6 uint64, f7 uint64, f8 uint32, f9 *uint8, f10 uint32) {
	some := v.Some()
	if some != nil {
		f0 = 1
		v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 := lower_DocumentUnlockOptions(*some)
		f1 = (uint64)(v1)
		f2 = (uint32)(v2)
		f3 = (uint64)(v3)
		f4 = (uint32)(v4)
		f5 = (uint32)(v5)
		f6 = (uint64)(v6)
		f7 = (uint64)(v7)
		f8 = (uint32)(v8)
		f9 = (*uint8)(v9)
		f10 = (uint32)(v10)
	}
	return
}

func lower_DocumentTouchOptions(v DocumentTouchOptions) (f0 uint64, f1 uint32, f2 uint64, f3 uint32, f4 uint32, f5 uint64, f6 uint64, f7 uint32, f8 *uint8, f9 uint32) {
	f0 = (uint64)(v.ExpiresIn)
	f1, f2 = lower_OptionU64(v.TimeoutNs)
	f3, f4, f5, f6 = lower_OptionRetryStrategy(v.RetryStrategy)
	f7, f8, f9 = lower_OptionRequestSpan(v.ParentSpan)
	return
}

func lower_OptionDocumentTouchOptions(v cm.Option[DocumentTouchOptions]) (f0 uint32, f1 uint64, f2 uint32, f3 uint64, f4 uint32, f5 uint32, f6 uint64, f7 uint64, f8 uint32, f9 *uint8, f10 uint32) {
	some := v.Some()
	if some != nil {
		f0 = 1
		v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 := lower_DocumentTouchOptions(*some)
		f1 = (uint64)(v1)
		f2 = (uint32)(v2)
		f3 = (uint64)(v3)
		f4 = (uint32)(v4)
		f5 = (uint32)(v5)
		f6 = (uint64)(v6)
		f7 = (uint64)(v7)
		f8 = (uint32)(v8)
		f9 = (*uint8)(v9)
		f10 = (uint32)(v10)
	}
	return
}

func lower_DocumentGetAndTouchOptions(v DocumentGetAndTouchOptions) (f0 uint64, f1 uint32, f2 uint64, f3 uint32, f4 uint32, f5 uint64, f6 uint64, f7 uint32, f8 *uint8, f9 uint32) {
	f0 = (uint64)(v.ExpiresIn)
	f1, f2 = lower_OptionU64(v.TimeoutNs)
	f3, f4, f5, f6 = lower_OptionRetryStrategy(v.RetryStrategy)
	f7, f8, f9 = lower_OptionRequestSpan(v.ParentSpan)
	return
}

func lower_OptionDocumentGetAndTouchOptions(v cm.Option[DocumentGetAndTouchOptions]) (f0 uint32, f1 uint64, f2 uint32, f3 uint64, f4 uint32, f5 uint32, f6 uint64, f7 uint64, f8 uint32, f9 *uint8, f10 uint32) {
	some := v.Some()
	if some != nil {
		f0 = 1
		v1, v2, v3, v4, v5, v6, v7, v8, v9, v10 := lower_DocumentGetAndTouchOptions(*some)
		f1 = (uint64)(v1)
		f2 = (uint32)(v2)
		f3 = (uint64)(v3)
		f4 = (uint32)(v4)
		f5 = (uint32)(v5)
		f6 = (uint64)(v6)
		f7 = (uint64)(v7)
		f8 = (uint32)(v8)
		f9 = (*uint8)(v9)
		f10 = (uint32)(v10)
	}
	return
}
